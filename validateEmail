<script runat = "server">

Platform.Load("Core", "1.1.2");
var api = new Script.Util.WSProxy();
var current_BU = "XXXXXXX";
var authURL = 'https://XXXXXXXXX.auth.marketingcloudapis.com'
var tokenMktCloud = geraTokenMkt();

/**
 * Generates a token for marketing purposes.
 * @returns {Object} An object containing the access token, the REST instance URL, and the expiration date.
 */
function geraTokenMkt() {
    try {
        var urlToken = authURL + '/v2/token';
        var ContentType = 'application/json';
        var payload = {
            client_id: "XXXXXXXXXX",
            client_secret: "XXXXXXXXX",
            grant_type: 'client_credentials'
        };
        var Result = HTTP.Post(urlToken, ContentType, Stringify(payload));
        var tokenResponse = Platform.Function.ParseJSON(Result.Response[0]);
        var accessToken = tokenResponse.access_token;
        var rest_instance_url = tokenResponse.rest_instance_url;
        var startDate = new Date();
        var expireDate = new Date(startDate.getTime() + 18 * 60000);
        logErro("Gerou token", Stringify(tokenResponse).replace(/(?:\\[rn]|[\r\n]+)+/g, ""))
        return {
            "accessToken": accessToken,
            "rest_instance_url": rest_instance_url,
            "expireDate": expireDate
        }
    } catch (e) {
        logErro("/v2/token", Stringify(e).replace(/(?:\\[rn]|[\r\n]+)+/g, ""))
    }
}

/**
 * Generates a log entry in the "retorno_list_detective" Data Extension.
 * @param {string} email - The email address to be logged.
 * @param {boolean} valid - Indicates whether the email is valid or not.
 * @param {string} failedValidation - The reason for the failed validation, if applicable.
 */
function geraLog(email, valid, failedValidation) {
    var logErrorDE = DataExtension.Init("XXXXXXX");
    logErrorDE.Rows.Add({
        email: email,
        valid: valid,
        failedValidation: failedValidation
    });
}

function logErro(step, message) {
    var deName = DataExtension.Init("XXXXXX");
    deName.Rows.Add({
        step: step,
        message: message
    });
}

function updateFlag(email) {
    var deFlagUpdate = DataExtension.Init("XXXXXXX")
    deFlagUpdate.Rows.Update({
        Executar: "False"
    }, ["EmailAddress"], [email]);
}

/**
 * Validates an email address using a REST API.
 *
 * @param {Object} payload - The payload containing the email address to validate.
 * @param {Object} tokenMktCloud - The tokenMktCloud object containing the REST instance URL and access token.
 * @returns {void}
 * @throws {Error} If an error occurs during the validation process.
 */
function validateEmail(payload, tokenMktCloud) {
    try {
        var Url = tokenMktCloud.rest_instance_url + '/address/v1/validateEmail';
        var ContentType = 'application/json';
        var Payload = Stringify(payload);
        var HeaderNames = ["Authorization"];
        var s1 = "Bearer ";
        var access_Token = tokenMktCloud.accessToken;
        var HeaderValues = [s1.concat(access_Token)]; // Token caso precise
        var Result = HTTP.Post(Url, ContentType, Payload, HeaderNames, HeaderValues); //Chamada API
        var response = Platform.Function.ParseJSON(Result.Response[0]);
        var email = response.email;
        var valid = response.valid;
        var failedValidation = response.failedValidation;
        if (Result.StatusCode == 200 && !!failedValidation) {
            geraLog(email, valid, failedValidation);
        }
        updateFlag(email);
    } catch (e) {
        logErro("/address/v1/validateEmail", Stringify(e).replace(/(?:\\[rn]|[\r\n]+)+/g, ""))
    }
}

/**
 * Retrieves data from a Data Extension and returns an array of objects.
 * Each object represents a row in the Data Extension and contains the specified columns.
 * 
 * @returns {Array} An array of objects representing the rows in the Data Extension.
 */
function lerDadosDE() {
    try {

        var config = {
            name: "XXXXXXX",
            cols: [
                "EmailAddress"
            ],
            filter: null,
            opts: {
                BatchSize: 2500
            },
            props: {}
        }

        var result = [],
            moreData = true,
            reqID = req = null;

        while (moreData) {

            moreData = false;
            if (reqID) config.props.ContinueRequest = reqID;
            var req = api.retrieve("DataExtensionObject[" + config.name + "]", config.cols, config.filter, config.opts, config.props);
            if (req) {
                moreData = req.HasMoreRows;
                reqID = req.RequestID;
                var results = req.Results;
                for (var k in results) {
                    var props = results[k].Properties;
                    var o = {};
                    for (var i in props) {
                        var key = props[i].Name;
                        var val = props[i].Value
                        if (key.indexOf("_") != 0) o[key] = val;
                    }
                    result.push(o);
                }
            }
        }
        return result;
    } catch (error) {
        logErro("XXXXXXXX", Stringify(error).replace(/(?:\\[rn]|[\r\n]+)+/g, ""))
    }
}

/**
 * This script validates email addresses using SyntaxValidator and ListDetectiveValidator.
 * It iterates through a list of email addresses and sends each address to the validateEmail function.
 * If the tokenMktCloud has expired, it generates a new token and logs an error message.
 */

if (tokenMktCloud) {
    var data = lerDadosDE();
    for (var i = 0; i < data.length; i++) {
        var payload = {
            email: data[i].EmailAddress,
            validators: ["SyntaxValidator", "ListDetectiveValidator"]
        };
        //Write(Stringify(payload));
        var expireDate1 = tokenMktCloud.expireDate
        if (new Date(expireDate1) < new Date()) {
            tokenMktCloud = geraTokenMkt();
            logErro("if data expirada")
        }
        validateEmail(payload, tokenMktCloud);
    }
} < /script>
